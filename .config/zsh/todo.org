#+TITLE: todo
#+AUTHOR: laluxx
#+DESCRIPTION: things to add
#+STARTUP: showeverything
#+PROPERTY: header-args :tangle


* GUM
very cool stuff
** theme
*** dracula
#+begin_src shell
export GUM_INPUT_CURSOR_FOREGROUND="#FF0"
export GUM_INPUT_PROMPT_FOREGROUND="#9AEDFE"
export GUM_INPUT_PLACEHOLDER="What's up?"
export GUM_INPUT_PROMPT="➜ "
export GUM_INPUT_WIDTH=80
#+end_src

** gum-commit
#+begin_src shell

function gum-commit(){
TYPE=$(gum choose "fix" "feat" "docs" "style" "refactor" "test" "chore" "revert")
SCOPE=$(gum input --placeholder "scope")

# Since the scope is optional, wrap it in parentheses if it has a value.
test -n "$SCOPE" && SCOPE="($SCOPE)"

# Pre-populate the input with the type(scope): so that the user may change it
SUMMARY=$(gum input --value "$TYPE$SCOPE: " --placeholder "Summary of this change")
DESCRIPTION=$(gum write --placeholder "Details of this change (CTRL+D to finish)")

# Commit these changes
gum confirm "Commit changes?" && git commit -m "$SUMMARY" -m "$DESCRIPTION"
}
#+end_src
** prompt
#+begin_src shell

function gum-prompt(){
    gum input --cursor.foreground "#FF0" --prompt.foreground "#0FF" --prompt "* " \
        --placeholder "What's up?" --width 80 --value "Not much, hby?"
}


#+end_src
** gum-input
this is hardcoded will be made more modular
will generate an answer.txt file containing tha answer
#+begin_src shell
function gum-input(){
    gum input > answer.txt
}
#+end_src
** gum-password
#+begin_src shell
function gum-password(){
    gum input --password > password.txt
}
#+end_src
** gum-write
Prompt for some multi-line text.
#+begin_src shell
function gum-write(){
    gum write > story.txt
}

#+end_src
** gum-filter
Use fuzzy matching to filter a list of values:
#+begin_src shell
function gum-filter(){
    echo Strawberry >> flavors.txt
    echo Banana >> flavors.txt
    echo Cherry >> flavors.txt
    cat flavors.txt | gum filter > selection.txt
}
#+end_src
*** limit
#+begin_src shell
function gum-filter-limit(){
    cat flavors.txt | gum filter --limit 2
}
#+end_src
*** no limit
#+begin_src shell
function gum-filter-no-limit(){
    cat flavors.txt | gum filter --no-limit
}
#+end_src
** gum-choose
Choose an option from a list of choices.
#+begin_src shell
function gum-choose(){
    echo "Pick a card, any card..."
    CARD=$(gum choose --height 15 {{A,K,Q,J},{10..2}}" "{♠,♥,♣,♦})
    echo "Was your card the $CARD?"
}
#+end_src
*** limit
#+begin_src shell
function gum-choose-limit(){
    echo "Pick your top 5 songs."
    cat songs.txt | gum choose --limit 5
}
#+end_src
*** no limit
#+begin_src shell
function gum-choose-no-limit(){
    echo "What do you need from the grocery store?"
    cat foods.txt | gum choose --no-limit
}
#+end_src
*** macros
#+begin_src shell

function gum-choose-100(){
    gum choose {1..100}
}
#+end_src
** gum-confirm
#+begin_src shell
function gum-confirm(){
    gum confirm && rm file.txt || echo "File not removed"
}
#+end_src
** gum-file
#+begin_src shell
function gum-file(){
    emacs $(gum file $HOME)
}

#+end_src
** gum-spin
Display a spinner while running a script or command. The spinner will automatically stop after the given command exits.
Available spinner types include:
line, dot, minidot, jump, pulse, points, globe, moon, monkey, meter, hamburger.
#+begin_src shell
function gum-spin(){
    gum spin --spinner line --title "Buying Bubble Gum..." -- sleep 5
}
#+end_src
** table
Select a row from some tabular data.
#+begin_src shell
# gum table < flavors.csv | cut -d ',' -f 1
#+end_src
** styling
*** preatty print
#+begin_src shell
function gum-preatty-print(){
    gum style \
	    --foreground 212 --border-foreground 212 --border double \
	    --align center --width 50 --margin "1 2" --padding "2 4" \
	    'Bubble Gum (1¢)' 'So sweet and so fresh!'
}

#+end_src
